子查询
（1）利用子查询进行过滤
select order_num from orderitems where prod_id='TNT2';
select cust_id from orders where order_num IN(20005,20007);
把第一个查询变为子查询组合的两个查询
select cust_id from orders where order_num IN(
                            select order_num from orderitems where prod_id = 'TNT2');
                            
                            
把子查询分解为多行并且适当的进行缩进，能简化子查询的使用                            
select cust_name,cust_contact from customers where cust_id IN(10001,10004);
select cust_name,cust_contact from customers where cust_id IN(
                            select cust_id from orders IN(
                                            select order_num from orderitems where prod_id='TNT2'));
 where子句中使用子查询能编写出功能很强并且很灵活的SQL子句。对于能嵌套的子查询数目没有限制，实际中由于性能的限制不能嵌套太多
 
(2)作为计算字段使用子查询
select COUNT(*) as orders from orders where cust_id =10001;
将COUNT()作为一个子查询
select cust_name,cust_state,(
                             select COUNT(*) from orders where cust_id=cust_id) as orders 
                             from customers order by cust_name;错误的示例
如果不完全限定列名，mysql将假定你是对orders表中的cust_id进行自身比较；
正确的方式为：任何时候只要列名可能有多义性，就必须使用语法——表名和列名由一个句号分割

联接表
（1）创建联结
select vend_name,prod_name,prod_price from vendors ,products where vendors.vend_id=products.vend_id order by vend_name,prod_name;
from子句列出了两个表，分别是vendors和products;where子句指示mysql匹配vendors表中的vend_id和products表中的vend_id


(2)where子句的重要性——没有where子句，第一个表中的每个行与第二个表中的每个行匹配
select vend_name,prod_name,prod_price from vendors,products order by vend_name,prod_name;
笛卡尔积：由没有联结条件的表关系返回的结果为笛卡尔积；检索出的行的数目将是第一个表中的行数乘以第二个表中的行数；
注意：应该保证所有的联结都有where子句，否则mysql将返回比想要的数据多的多的数据
（3）内部联结
select vend_name,prod_name,prod_price from vendors INNER JOIN products ON vendors.vend_id=products.vend_id;
两个表之间的关系是from子句的组成部分，这里以INNER JOIN指定；联结条件用特定的ON子句而不是where子句给出，传递给ON的实际条件与传递给where的相同
（4）联结多个表
select prod_name,vend_name,prod_price,quantity from orderitems,products,vendors where products.vend_id=vendors.vend_id
                                                                                and orderitems.prod_id=vendors.prod_id
                                                                                and order_num=20005;
where子句定义了两个联结条件，第三个联结条件用来过滤订单20005中的物品（联结的表越多，性能下降的越厉害）
select cust_name,cust_contact from customers where cust_id IN(select cust_id from orders 
                                                               where cust_id IN(select order_num from orderitems
                                                               where prod_id='TNT2'));
子查询并不是执行复杂select操作的最有效的方法
select cust_name,cust_contact from customers ,orders,orderitems where customers.cust_id=orders.cust_id
                                                                and orderitems.order_num=orders.order_num
                                                                and prod_id='TNT2';作用同上例，但是更简洁简单

创建高级联结
（1）使用表别名
select Concat(RTrim(vend_name),'(',RTrim(vend_country),')') as vend_title from vendors order by vend_name;
SQL允许给表起别名
select cust_name,cust_contact from customers as c,orders as o,orderitems as oi where c.cust_id=o.cust_id
                                                                               and oi.order_num=o.order_num
                                                                               and prod_id='TNT2';
表别名不仅能用于where子句，它还可以用于select的列表、order by子句及语句的其它部分

不同类型的联结
（2）自联结——能在单条select语句中不止一次的引用相同的表
select prod_id,prod_name from products where vend_id=(select vend_id from products where prod_id='DTNTR');方法一：使用子查询
select p1.prod_id,p1.prod_name from products as p1,products as p2 where p1.vend_id=p2.vend_id and p2.prod_id='DTNTR';
两个表实际是形同的表，因此products表在from子句中出现了两次；为解决此问题使用了表别名，products的第一次出现为p1,第二次为p2
（3）自然联结*（难）
select c.*,o.order_num,o.order_date,oi.prod_id,oi.quantity,oi.item_price from customers as c,order as o,orderitems as oi
                                                                         where c.cust_id=o.cust_id
                                                                         and oi.order_num=o.order_num
                                                                         and prod_id='FB';
无论何时对表进行联结，应该至少有一个列出现在不止一个表中（被联结的列）；标准的联结返回所有的数据，甚至相同的列多次出现；
自然联结排除多次出现，使每个列只返回一次；


（4）外部联结
select customers.cust_id,orders.order_num from customers INNER JOIN orders ON customers.cust_id=orders.cust_id;
select customers.cust_id,orders.order_num from cusomers LEFT OUTER JOIN orders ON customers.cust_id=orders.cust_id;
关键字OUTER JOIN来指定联结的类型




（5）使用带聚集函数的联结
select customers.cust_name,customers.cust_id,COUNT(orders.order_num) as num_ord from customers INNER JOIN orders
                                                                                  ON customers.cust_id=orders.cust_id
                                                                                  group by customers.cust_id;
select语句使用innner join将customers和orders表相互关联；group by子句按客户分组数据，函数调用COUNT(orders.order_num)对每个客户的订单总数计数
select customers.cust_name,customers.cust_id,COUNT(orders.order_num) as num_ord from customers left outer join orders
                                                                                          on customers.cust_id=orders.cust_id
                                                                                          group by customers.cust_id;
聚集函数与其他联结一起使用








