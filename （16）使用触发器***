触发器是mysql响应以下任意语句而自动执行的一条mysql语句：delete、insert、update，其它mysql语句不支持触发器；
（1）创建触发器——唯一的触发器名；触发器关联的表；触发器应该相应的活动（delete/insert/update）；
create trigger newproduct after insert on products for each row select 'product added';触发器用create trigger语句创建；
create trigger用来创建名为newproduct的新触发器；触发器可在一个操作发生之前或之后执行；这里给出after insert 所以此触发器将在insert语句成功执行后
执行；触发器按每个表每个事件每次的定义，每个表每个事件每次只运行一个触发器；
（只用表才支持触发器，视图不支持）

（2）删除触发器
drop trigger newproduct;触发器不能更新或覆盖；为了修改一个触发器，必须先删除它，然后再重新创建；

（3）使用触发器
insert触发器——在insert语句执行之前或之后执行；
insert触发器代码中，可以引用一个名为new的虚拟表，访问被插入的行；
在before insert触发器中，new中的值也可以被更新（运行更改的被插入的值）
对于auto_inicrement列，new在insert执行之前包含0，在insert执行之后包含新的自动生成值；

create trigger neworder after insert on orders for each row select new.order_num;
此代码创建一个名为neworder的触发器，按照after insert on orders执行；在插入一个新订单到orders表时，mysql生成一个新订单号并保存到order_num中；
触发器从new.order_num取得这个值并返回它；此触发器必须按照after insert执行，因为在before insert语句执行之前，新的order_num还未生成；对于orders的
每次插入使用这个触发器将总是返回新的订单号；
为测试这个触发器，试着插入一下新行;
insert into orders(order_date,cust_id) values(Now(),10001);
orders包含3个列；order_date和cust_id必须给出，order_num由mysql自动生成，而现在order_num还自动被返回；



delete触发器在delete语句执行之前或之后执行
在delete触发器代码内，可以引用一个名为old的虚拟表，访问被删除的行；
old中的值全都是只读的，不能更新；

create trigger deleteorder before delete on orders for each row  
begin 
     insert into archive_orders(order_num,order_date,cust_id) values(old.order_num,old.order_date,old.cust_id);
end;
在任何订单被删除前将执行此触发器；它使用一条insert语句将old中的值（要被删除的订单）保存到一个名为archive_orders的存档中；
使用before delete触发器的优点是，如果由于某种原因订单不能存档，delete本身将被放弃；

update触发器在update语句执行之前或之后执行;
在update触发器代码中，可以用一个名为old的虚拟表访问以前（update语句前）的值，引用一个名为New的虚拟表访问更新的值；
在beffore update触发器中，new中的值也可能被更新（允许更改将要用于update语句中的值）
old中的值全部都是只读的，不能更新；
create trigger updatevendor before update on vendors for each row set new.vend_state=Uppder(new.vend_state);
任何数据净化都要在update语句之前进行；本例每更新一个行时，new.vend_state中的值（将用来更新表中行的值）都用Upper(new.vend_state)替换


